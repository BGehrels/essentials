swagger: '2.0'

# basic meta information
info:
  title: ESSENTIALS API
  version: '0.1'
  description: ESSENTIALS is STUPS' repository for resource types and scopes

externalDocs:
  description: STUPS overview
  url: http://zalando-stups.github.io/

# technical configuration
basePath: /
produces:
- application/json
consumes:
- application/json

paths:

  '/resource-types':
    get:
      summary: List resource types
      description: |
        Provides a list of all resource types.
      tags:
        - ResourceType
      operationId: undefined
      responses:
        200:
          description: List of resource types
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: Unique identifier
                  example: sales-order
                name:
                  type: string
                  description: Human-readable name
                  example: Sales Order
              required:
                - id
                - name
        default:
          $ref: '#/responses/Error'

  '/resource-types/{resource_type_id}':
    get:
      summary: Read resource type
      description: |
        Returns detailed information about a resource type.
      tags:
        - ResourceType
      operationId: undefined
      parameters:
        - $ref: '#/parameters/ResourceTypeID'
      responses:
        200:
          description: Resource type details
          schema:
            type: object
            properties:
              id:
                type: string
                description: Unique identifier
                example: sales-order
              name:
                type: string
                description: Human-readable name
                example: Sales Order
              description:
                type: string
                description: |
                  An elaborate description with examples of
                  what kind of data this resource type includes
              resource_owners:
                type: array
                items:
                  type: string
                  description: |
                    Who owns the resource? Who can grant access to the resource?
                  example: customer
            required:
              - id
              - name
        404:
          description: Resource type not found
        default:
          $ref: '#/responses/Error'

    put:
      summary: Save resource type
      description: |
        Creates or updates a resource type.
        If there is any resource-owner-scope ("is_resource_owner_scope" = true),
        belonging to this resource type, the "resource_owners" list MUST NOT
        be empty.
      tags:
        - ResourceType
      operationId: undefined
      parameters:
        - $ref: '#/parameters/ResourceTypeID'
        - name: resource_type
          in: body
          description: |
            Details about the resource type
          schema:
            type: object
            properties:
              name:
                type: string
                description: Human-readable name
                example: Sales Order
              description:
                type: string
                description: |
                  An elaborate description with examples of
                  what kind of data this resource type includes
              resource_owners:
                type: array
                items:
                  type: string
                  description: |
                    Who owns the resource? Who can grant access to the resource?
            required:
              - name
      responses:
        200:
          description: Resource type stored
        default:
          $ref: '#/responses/Error'

    delete:
      summary: Delete resource type
      description: |
        Deletes a resource type.
      tags:
        - ResourceType
      operationId: undefined
      parameters:
        - $ref: '#/parameters/ResourceTypeID'
      responses:
        200:
          description: Resource type deleted
        default:
          $ref: '#/responses/Error'

  '/resource-types/{resource_type_id}/scopes':
    get:
      summary: List scopes
      description: |
        List of all OAuth2.0 scopes belonging to the requested resouce type.
      tags:
        - Scope
      operationId: undefined
      parameters:
        - $ref: '#/parameters/ResourceTypeID'
      responses:
        200:
          description: List of scopes
          schema:
            description: Scopes
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: Unique identifier
                  example: read
                summary:
                  type: string
                  description: A few words on what the scope grants
                  example: Grants read-access to the sales orders of a customer
                description:
                  type: string
                  description: An elaborate description
                user_information:
                  type: string
                  description: |
                    This will be shown to the user on the consent screen. “The application would like to…”
                  example: Read your Zalando orders
                criticality_level:
                  type: integer
                  format: int32
                  description: |
                    How sensitive is the data you get access to?
                    1: 'Not critical';
                    2: 'Personal Information';
                    3: 'Financial information';
                    4: 'Secret information';
                  example: 3
                is_resource_owner_scope:
                  type: boolean
                  description: |
                    A Resource Owner Scope can be granted by the resource owners to others.
                    The resource owner automatically has the permission to grant this scope
                    without further actions. Resource Owner Scopes always authorize only in
                    the context of the resource owner’s resources. For instance: A customer
                    can grant an application read access to his sales order data.
                  example: true
              required:
                - id
                - summary
                - criticality_level
                - is_resource_owner_scope

  '/resource-types/{resource_type_id}/scopes/{scope_id}':
    get:
      summary: Read scope
      description: |
        Read details of one scope
      tags:
        - Scope
      operationId: undefined
      parameters:
        - $ref: '#/parameters/ResourceTypeID'
        - $ref: '#/parameters/ScopeID'
      responses:
        200:
          description: Detailed information about a scope
          schema:
            type: object
            properties:
              id:
                type: string
                description: Unique identifier
                example: read
              summary:
                type: string
                description: A few words on what the scope grants
                example: Grants read-access to the sales orders of a customer
              description:
                type: string
                description: An elaborate description
              user_information:
                type: string
                description: |
                  This will be shown to the user on the consent screen. “The application would like to…”
                example: Read your Zalando orders
              criticality_level:
                type: integer
                format: int32
                description: |
                  "How sensitive is the data you get access to?
                  1: 'Not critical';
                  2: 'Personal Information';
                  3: 'Financial information';
                  4: 'Secret information';"
                example: 3
              is_resource_owner_scope:
                type: boolean
                description: |
                  A Resource Owner Scope can be granted by the resource owners to others.
                  The resource owner automatically has the permission to grant this scope
                  without further actions. Resource Owner Scopes always authorize only in
                  the context of the resource owner’s resources. For instance: A customer
                  can grant an application read access to his sales order data.
                example: true
            required:
              - id
              - summary
              - criticality_level
              - is_resource_owner_scope
        404:
          description: Scope not found
        default:
          $ref: '#/responses/Error'

    put:
      summary: Save scope
      description: |
        Creates or updates an OAuth2.0 scope for a certain resource type.
        A resource-owner-scope ("is_resource_owner_scope" = true)
        requires the resource type to have AT LEAST ONE "resource_owner".
      tags:
        - Scope
      operationId: undefined
      parameters:
        - $ref: '#/parameters/ResourceTypeID'
        - $ref: '#/parameters/ScopeID'
        - name: scope
          in: body
          schema:
            type: object
            properties:
              summary:
                type: string
                description: A few words on what the scope grants
                example: Grants read-access to the sales orders of a customer
              description:
                type: string
                description: An elaborate description
              user_information:
                type: string
                description: |
                  This will be shown to the user on the consent screen. “The application would like to…”
                example: Read your Zalando orders
              criticality_level:
                type: integer
                format: int32
                minimum: 1
                maximum: 4
                description: |
                  How sensitive is the data you get access to?
                  1: 'Not critical';
                  2: 'Personal Information';
                  3: 'Financial information';
                  4: 'Secret information';
                example: 3
              is_resource_owner_scope:
                type: boolean
                description: |
                  A Resource Owner Scope can be granted by the resource owners to others.
                  The resource owner automatically has the permission to grant this scope
                  without further actions. Resource Owner Scopes always authorize only in
                  the context of the resource owner’s resources. For instance: A customer
                  can grant an application read access to his sales order data.
                example: true
            required:
              - summary
              - criticality_level
              - is_resource_owner_scope

      responses:
        200:
          description: Scope stored
        404:
          description: Resource type not found
        default:
          $ref: '#/responses/Error'

    delete:
      summary: Delete scope
      description: |
        Removes an OAuth2.0 scope from a certain resource type
      tags:
        - Scope
      operationId: undefined
      parameters:
        - $ref: '#/parameters/ResourceTypeID'
        - $ref: '#/parameters/ScopeID'
      responses:
        200:
          description: Scope stored
        404:
          description: Resource type was not found
        default:
          $ref: '#/responses/Error'

parameters:
  ResourceTypeID:
    name: resource_type_id
    in: path
    type: string
    description: ID of the resource type
    required: true
    pattern: "^[a-z][a-z0-9-_]*[a-z0-9]$"

  ScopeID:
    name: scope_id
    in: path
    type: string
    description: "ID of the OAuth2.0 scope"
    required: true
    pattern: "^[a-z][a-z0-9-_]*[a-z0-9]$"

responses:
  Error:
    description: An error occured.
    schema:
      $ref: '#/definitions/Error'

definitions:
  Error:
    type: object
    properties:
      message:
        type: string
    example:
      message: Internal Server Error
